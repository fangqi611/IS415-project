#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    https://shiny.posit.co/
#

library(shiny)
library(sf)
library(tmap)
library(arrow)
library(lubridate)
library(tidyverse)
library(sp)
library(raster)
library(spatstat)
library(classInt)
library(viridis)
library(spNetwork)
library(spatstat)
library(ggplot2)
library(ggmap)
library(tidymodels)
library(glmnet)
library(readxl)
library(shinydashboard)
library(maptools)
library(terra)
pacman::p_load(scales)
library(scales)

#####################################

osm_basemap <- tm_basemap(server = "OpenStreetMap.HOT")
imagery_basemap <- tm_basemap(server = "Esri.WorldImagery")

hk_census <- read_excel("/Users/fangqilim/fangqi611/IS415-project/daylightapp/data/aspatial/hkcensus.xlsx")

district_18 <- st_read(dsn = "/Users/fangqilim/fangqi611/IS415-project/daylightapp/data/geospatial/hk_18Districts/",
                      layer = "HKDistrict18" )

sf_district_18 <- st_transform(district_18, crs = 2326)


#####################################
## KDE on whole of HK
cp <- read_csv("/Users/fangqilim/fangqi611/IS415-project/daylightapp/data/aspatial/hkrecyclepoints.csv")

cp_sf <- st_as_sf(cp, 
                  coords = c("lgt","lat"), 
                  crs = 4326) %>%
  st_transform(crs=2326)

cp_sf <- cp_sf %>%
  st_union()

cp_sf <- cp_sf %>% st_transform(crs = 2326)

cp_ppp <- as.ppp(cp_sf)

cp <- as_Spatial(cp_sf)
cp_sp <- as(cp, "SpatialPoints")
cp_ppp <- as(cp_sp, "ppp")
cp_ppp_jit <- rjitter(cp_ppp, 
                          retry=TRUE, 
                          nsim=1, 
                          drop=TRUE)

district_18 <- district_18 %>%
  st_transform(crs = 2326)

district_18<-as_Spatial(district_18)

district_18_sp<-as(district_18, "SpatialPolygons")

district_18_owin<-as(district_18_sp, "owin")

cp_ppp_jit <- rjitter(cp_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)

any(duplicated(cp_ppp_jit))

hk_cp_ppp <- cp_ppp_jit[district_18_owin]

hk_ppp.km <- rescale(hk_cp_ppp, 1000, "km")

plot(density(hk_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="Gaussian")

plot(density(hk_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="epanechnikov"), 
     main="Epanechnikov")

plot(density(hk_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="quartic"), 
     main="Quartic")

plot(density(hk_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="disc"), 
     main="Disc")

####################################
#KDE for Wan Chai

wanchai <- district_18 %>%
  filter(ENAME == "WAN CHAI")

wanchai <- wanchai %>%
  st_transform(crs = 2326)

wanchai <- as_Spatial(wanchai)

wanchai_sp<-as(wanchai, "SpatialPolygons")

wanchai_owin<-as(wanchai_sp, "owin")

hk_ppp_jit <- rjitter(hk_cp_ppp, 
                      retry=TRUE, 
                      nsim=1, 
                      drop=TRUE)

hk_wanchai_ppp <- hk_ppp_jit[wanchai_owin]

hk_wanchai_ppp.km = rescale(hk_wanchai_ppp, 1000, "km")

plot(density(hk_wanchai_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="Gaussian")

plot(density(hk_wanchai_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="epanechnikov"), 
     main="Epanechnikov")

plot(density(hk_wanchai_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="quartic"), 
     main="Quartic")

plot(density(hk_wanchai_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="disc"), 
     main="Disc")

####################################
#KDE for Sha Tin

shatin <- district_18 %>%
  filter(ENAME == "SHA TIN")

shatin <- shatin %>%
  st_transform(crs = 2326)

shatin <- as_Spatial(shatin)

shatin_sp <- as(shatin, "SpatialPolygons")

shatin_owin <- as(shatin_sp, "owin")

hk_ppp_jit <- rjitter(hk_cp_ppp, 
                      retry=TRUE, 
                      nsim=1, 
                      drop=TRUE)

hk_shatin_ppp = hk_ppp_jit[shatin_owin]

hk_shatin_ppp.km = rescale(hk_shatin_ppp, 1000, "km")

plot(density(hk_shatin_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="Gaussian")

plot(density(hk_shatin_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="epanechnikov"), 
     main="Epanechnikov")

plot(density(hk_shatin_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="quartic"), 
     main="Quartic")

plot(density(hk_shatin_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="disc"), 
     main="Disc")

####################################
#KDE for Yau Tsim Mong

ytm <- district_18 %>%
  filter(ENAME == "YAU TSIM MONG")

ytm <- ytm %>%
  st_transform(crs = 2326)

ytm <- as_Spatial(ytm)

ytm_sp <- as(ytm, "SpatialPolygons")

ytm_owin <- as(ytm_sp, "owin")

hk_ppp_jit <- rjitter(hk_cp_ppp, 
                      retry=TRUE, 
                      nsim=1, 
                      drop=TRUE)

hk_ytm_ppp <- hk_ppp_jit[ytm_owin]

hk_ytm_ppp.km = rescale(hk_ytm_ppp, 1000, "km")

plot(density(hk_ytm_ppp, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="Gaussian")

plot(density(hk_ytm_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="epanechnikov"), 
     main="Epanechnikov")

plot(density(hk_ytm_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="quartic"), 
     main="Quartic")

plot(density(hk_ytm_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="disc"), 
     main="Disc")

####################################
##G Function
G_HK = Gest(hk_cp_ppp, correction = "border")
plot(G_HK, xlim=c(0,500))

G_HK = Gest(hk_cp_ppp, correction = "border")
plot(G_HK, xlim=c(0,500))

G_HK.csr <- envelope(hk_cp_ppp, Gest, nsim = 99)

G_HK.csr <- read_rds("data/rds/G_HK.csr.rds")

plot(G_HK.csr)

####################################
##F Function

F_HK = Fest(hk_cp_ppp)
plot(F_HK)

F_HK.csr <- envelope(hk_cp_ppp, Fest, nsim = 99)

plot(F_HK.csr)

####################################
##K Function

#Sha Tin
K_shatin = Kest(hk_shatin_ppp, correction = "Ripley")
plot(K_shatin, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")

K_shatin.csr <- envelope(hk_shatin_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)

plot(K_shatin.csr, . - r ~ r, xlab="d", ylab="K(d)-r")

# Yau Tsim Mong
K_ytm = Kest(hk_ytm_ppp, correction = "Ripley")
plot(K_ytm, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")

K_ytm.csr <- envelope(hk_ytm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)

plot(K_ytm.csr, . - r ~ r, xlab="d", ylab="K(d)-r")

# Wan Chai
K_wc = Kest(hk_wanchai_ppp, correction = "Ripley")
plot(K_wc, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")

K_wc.csr <- envelope(hk_wanchai_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)

plot(K_wc.csr, . - r ~ r, xlab="d", ylab="K(d)-r")

####################################
##L Function

#Sha Tin
L_shatin = Lest(hk_shatin_ppp, correction = "Ripley")
plot(L_shatin, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)")

L_shatin.csr <- envelope(hk_shatin_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)

plot(L_shatin.csr, . - r ~ r, xlab="d", ylab="L(d)-r")

# Yau Tsim Mong
L_ytm = Lest(hk_ytm_ppp, correction = "Ripley")
plot(L_shatin, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)")

L_ytm.csr <- envelope(hk_ytm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)

plot(L_ytm.csr, . - r ~ r, xlab="d", ylab="L(d)-r")

# Wan Chai
L_wc = Lest(hk_wanchai_ppp, correction = "Ripley")
plot(L_wc, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)")

L_wc.csr <- envelope(hk_wanchai_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)

plot(L_wc.csr, . - r ~ r, xlab="d", ylab="L(d)-r")

####################################

# Define UI for application that draws a histogram
ui <- dashboardPage(
  dashboardHeader(title = "HK Recycling Stations Analysis"),
  dashboardSidebar(
    sidebarMenu(
      menuItem("Overview", tabName = "overview", icon = icon("dashboard")),
      menuItem("KDE", tabName = "kde", icon = icon("map")),
      menuItem("NKDE", tabName = "nkde", icon = icon("map-marked"))
    )
  ),
  dashboardBody(
    tabItems(
      # Overview tab content
      tabItem(tabName = "overview",
              fluidRow(
                box(title = "Overview Map", status = "primary", solidHeader = TRUE,
                    tmapOutput("d18_map", height = "600px")) # Adjust height as needed
              )),
      # KDE tab content
      tabItem(tabName = "kde",
              fluidRow(
                box(title = "Kernel Density Estimation", status = "warning", solidHeader = TRUE,
                    tmapOutput("kde_map", height = "600px"))
                    )),
      # NKDE tab content
      tabItem(tabName = "nkde",
              fluidRow(
                box(title = "Normalized Kernel Density Estimation", status = "info", solidHeader = TRUE
                    # Placeholder for NKDE output. Replace with your actual output UI element.
                    
              ))
    )
  )
)
)

########################
ui <- fluidPage(
  
  # Navbar
  navbarPage("Project Daylight",
             theme = bs_theme(bootswatch="lux"),
             
             # Homepage Panel
             tabPanel("Home",
         imageOutput("logo"),
         br(),
         hr(),
         br(),
         h4(strong("Project Description")),
         p("We would be using spatial point patterns analysis to study the distribution of recycling collection points in Hong Kong is random or clustered. We believe using this analysis is very useful to investigate whether there are any dependency relationships between them and the areaâ€™s density. From these results, we can make a fair comparison and conclusion."),
         p("We will also be performing network constrained spatial point patterns analysis to analyse the spatial point patterns to delve deeper insights, and understand if these events are affected by a network or there are spatial points events occurring alongside a network in our Shiny application."),
         p("For spatial point patterns analysis(SPPA), we would like to find out if the collection points in Hong Kong are randomly distributed throughout the country and if not, where are the locations with higher concentrations of collection points."),
         p("For network constrained spatial point patterns analysis, we would like to discover whether the distribution of the collection points are affected by the road network in Singapore. Through these analyses, we can investigate whether the distribution of Airbnb locations in Singapore are affected by point events or the road network."),
         br(),
         h4(strong("Project Motivation")),
         p("Our team want to develop an innovative application designed to assist government officials in addressing recycling challenges at national and district levels in Hong Kong."),
         p("Hong Kong faces a significant waste management challenge due to limited landfill space, exacerbated by the COVID-19 pandemic and a lack of widespread recycling habits among its residents."),
         p("Through our initiative, we aim not only to conserve Hong Kong's valuable resources but also to promote environmental sustainability when restructuring their recycling points. Furthermore, we aspire to offer valuable insights and lessons learned that can be applied by government officials beyond Hong Kong, guiding the implementation of successful nationwide recycling campaigns worldwide."),
         br(),
         h4(strong("About our Application")),
         p("Our application is focused on recycling collection points in Singapore and will assist users with two methods of Point Pattern Analysis:"),
         tags$ul(
           tags$li("Spatial Point Patterns Analysis (SPPA)"),
           tags$li("Network-Constrained Point Patterns Analysis (NetSPPA)")
         ),
         br(),
         p("For SPPA, users will be able to view the kernel density map of recycling collection points in different districts. We have chosen 3 districts, Wan Chai, Sha Tin and Yau Tsim Mong:"),
         tags$ul(
           tags$li("Hong Kong"),
           tags$li("Wan Chai - the least population in Hong Kong"),
           tags$li("Sha Tin - the second population in Hong Kong behind Yau Tsim Mong"),
           tags$li("Yau Tsim Mong - the highest population in Hong Kong"),
         ),
         br(),
         p("For NetSPPA, we will be focusing on the street network in Rochor. We chose Rochor as Rochor has a significant number of Airbnbs and each type of point events (Tourist Attractions, Bus Stops, Hotels, Shopping Malls, MRTs, 7-11s and Universities) are greater than 5, which will allow us to draw better statistical conclusions than the other zones with too little points. For example, Kallang only has 1 attraction and 1 university hence we will not be able to draw reliable statistical conclusions using Network Cross K-Function."),
         br(),
         p("To know more about how to use our application, ", tags$a(href="https://github.com/valtyl/IS415-GAA-Project/tree/master/others", "here"), " is our user guide!"),
         br(),
         h4(strong("Credits")),
         imageOutput("smulogo"),
         p("This project is done for IS415 Geospatial Analytics & Applications, a module in Singapore Management University with the guidance of Professor Kam Tin Seong."),
         br(),
         p("Done by:"),
         tags$ul(
           tags$li(tags$a(href="https://www.linkedin.com/in/fang-qi-lim/", "Lim Fang Qi")),
           tags$li(tags$a(href="https://www.linkedin.com/in/yashica-k", "Lee Sheung Yan")),
         ),
),

# Visualisation Panel
tabPanel("Visualisation",
         titlePanel("Visualisation by District"),
         
         fluidRow(
           # Sidebar
           sidebarLayout(
             
             sidebarPanel(
               selectInput(
                 "KDEInput",
                 "Areas",
                 # label = ACTUAL backend input
                 choices = c("Hong Kong", "Wan Chai", "Sha Tin", "Yau Tsim Mong"),
                 selected = "Hong Kong",
                 multiple = FALSE
               )
             ),
             
             # Show a plot of the generated distribution
             mainPanel(
               tabsetPanel(
                 tabPanel("Plot",
                          column(12,
                                 withSpinner(plotOutput("KDEPlot", width="100%", height=400), type=2)),
                          p()
                 )
                 
               )
             )
           )
         )
),

tabPanel("SPPA",
         # Application title
         titlePanel("Spatial Point Patterns Analysis"),
         
         sidebarLayout(
           sidebarPanel(fluid = TRUE, width = 3,
                        
                        # If KDE tabPanel is clicked, sidebarPanel below will be shown
                        conditionalPanel(
                          'input.SPPA_var === "SPPA Kernel Density Estimation"',
                          selectInput(
                            "SPPA_main_var",
                            "Districts",
                            choices = c("Hong Kong", "Wan Chai", "Sha Tin", "Yau Tsim Mong"),
                            selected = "Hong Kong",
                            multiple = FALSE
                          ),
                          selectInput(
                            "SPPA_kernel",
                            "Kernel Smoothing Input",
                            choices = c("Gaussian" = "gaussian",
                                        "Epanechnikov" = "epanechnikov",
                                        "Quartic" = "quartic",
                                        "Disc" = "disc"),
                            selected = "gaussian",
                            multiple = FALSE
                          ),
                          radioButtons(
                            "SPPA_bandwidth_method",
                            "Bandwidth Method",
                            choices = c("Auto",
                                        "Fixed",
                                        "Adaptive"),
                            selected = "Auto"
                          ),
                          conditionalPanel(
                            condition = "input.SPPA_bandwidth_method == 'Auto'",
                            selectInput(
                              "SPPA_bw_auto_var",
                              "Automatic Bandwidth Method",
                              choices = c("bw.diggle",
                                          "bw.CvL",
                                          "bw.scott",
                                          "bw.ppl"),
                              selected = "bw.diggle",
                              multiple = FALSE
                            )
                          ),
                          conditionalPanel(
                            condition = "input.SPPA_bandwidth_method == 'Fixed'",
                            sliderInput(
                              "SPPA_bw_fixed_var",
                              "Fixed Bandwidth Method (in km)",
                              min = 0,
                              max = 5,
                              step = 0.1,
                              value = 1
                            )
                          ),
                          actionButton("SPPA_Run_KDE", "Run Analysis")
                        ),
                        
                        # If G-Function tabPanel is clicked, the sidebarPanel below will be shown
                        conditionalPanel(
                          'input.SPPA_var === "SPPA G-Function"',
                          selectInput(
                            "SPPA_G_Main",
                            "Zone",
                            choices = c("Hong Kong", "Wan Chai", "Sha Tin", "Yau Tsim Mong"),
                            multiple = FALSE
                          ),
                          numericInput(
                            "SPPA_G_No_Simulations",
                            "Number of Simulations (value from 1-999)",
                            value = 99,
                            max = 99
                          ),
           ), # close sidebarPanel
           
           mainPanel(width = 9,
                     tabsetPanel(
                       id = "SPPA_var",
                       tabPanel("SPPA Kernel Density Estimation",
                                column(12,
                                       h6(strong("Note:")),
                                       p(em("Please wait a short while for the default map to load.")),
                                       p(em("Variable: Airbnbs in Kallang, Kernel: Gaussian, and Bandwidth Method: auto-bw.diggle are used to plot the default map, select alternative choices and click on 'Run Analysis' to update the map.")),
                                       withSpinner(tmapOutput("SPPA_KDE_Map"), type=2),
                                       tabsetPanel(
                                         id = "SPPA_KDE_info",
                                         tabPanel("About Spatial Kernel Density Estimation",
                                                  column(12,
                                                         h4("What is Spatial Kernel Density Estimation?"),
                                                         p("Kernel Density Estimation (KDE) is one of the most used density-based measures to estimate local density. It creates a grid in which each cell is assigned the density value of the kernel window centred on that cell. The density value is estimated by counting the number of objects/events in that kernel window."),
                                                         h5("How to interpret the output?"),
                                                         p("The v in the legend indicates the number of objects/events in the kernel window centred in each grid. The darker the colour of the area, the higher the intensity of points density in that area."),
                                                  ))))),
                       
                     ) # close tabsetPanel
                     
           ) # close mainPanel
         )), # close SPPA tabPanel
))
#NetSPPA goes down here
##############################################################################

# Define server logic required to draw a histogram
server <- function(input, output, session) {
  # use renderPlot() for STATIC map
  
  ######################## Visualisation ########################
  KDEplot <- eventReactive(input$KDEInput, {
    
    all_KDE <- switch(input$KDEInput,
                      "Hong Kong" = kallang_all_ppp,
                      "Wan Chai" = downtown_all_ppp,
                      "Sha Tin" = outram_all_ppp,
                      "Yau Tsim Mong" = rochor_all_ppp,
    )
    
    #plot(all_KDE, cols=c("red", "orange", "darkgrey", "brown", "green", "violet", "blue", "black"))
  },
  ignoreNULL = FALSE
  )
  
  output$KDEPlot <- renderPlot({
    KDEplot()
  })
  
  
  ### 1b) SPPA G Function 
  g_main <- reactive({
    if (input$SPPA_G_Main == "Hong Kong") {
      dataset <- hk_cp_ppp
    }
    else if (input$SPPA_G_Main == "Wan Chai") {
      dataset <- hk_wanchai_ppp
    }
    else if (input$SPPA_G_Main == "Sha Tin") {
      dataset <- hk_shatin_ppp
    }
    else if (input$SPPA_G_Main == "Yau Tsim Mong") {
      dataset <- hk_ytm_ppp
    }
    return(dataset)
  })
  
  G_Function <- eventReactive(input$SPPA_Run_Gfunc, {
    g_func.csr <- isolate(envelope(g_main(), 
                                   Gest, 
                                   correction='all',
                                   nsim = input$SPPA_G_No_Simulations))
    plot(g_func.csr, main="Gest")
  }, ignoreNULL = FALSE)
  
  output$SPPA_G_Function <- renderPlot({
    G_Function()
  })
}

# Run the application 
shinyApp(ui = ui, server = server)
