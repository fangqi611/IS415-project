---
title: "KDE Analysis"
format: html
date-modified: "last-modified"
execute:  
  warning: false
  freeze: true
  message: false 
  eval: true 
  echo: true 
  fig-retine: 3
date: "`r Sys.Date()`"
---

# 1. Getting Started

```{r}
pacman::p_load(sf, sfdep, tmap, tidyverse, knitr, GWmodel, dplyr, plotly, arrow, lubridate, sf, tmap, maptools, sp, raster, spatstat, spNetwork, classInt, viridis, readr)
```

# 2. Loading the Packages

## 2.1 Loading Apatial Data

This dataset is the Waste Less - Recycable Collection Point Data from data.gov.hk that contains all the different recycling points in Hong Kong.

```{r}
cp <- read_csv("data/aspatial/hkrecyclepoints.csv")
```

## 2.2 Loading Geospatial Data

This dataset is from Hong Kong CSDI which contains all the 18 districts in Hong Kong.

```{r}
district_18 <- st_read(dsn = "data/geospatial/hk_18Districts/",
                      layer = "HKDistrict18" )
```

# 3. Transforming Coordinate System

```{r}
sf_district_18 <- st_transform(district_18, crs = 2326)
```

```{r}
cp_sf <- st_as_sf(cp, 
                  coords = c("lgt","lat"), 
                  crs = 4326) %>%
  st_transform(crs=2326)
```

## 3.1 Transforming cp_sf to sf and ppp format

```{r}
cp_sf <- cp_sf %>%
  st_union()

cp_sf <- cp_sf %>% st_transform(crs = 2326)
```

```{r}
cp_ppp <- as.ppp(cp_sf)
```

Converting sf format for cp into spatial class the sp format because you cannot do it directly.

```{r}
cp <- as_Spatial(cp_sf)
```

Spatstat requires the analytical data to be in ppp object form, but since there is no way to directly convert a Spatial\* classes into ppp object, we’ll need to convert the Spatial\* classes into a generic Spatial object first, then convert the generic sp object into ppp object form.

```{r}
cp_sp <- as(cp, "SpatialPoints")
```

```{r}
#| eval: false
cp_ppp <- as(cp_sp, "ppp")
```

```{r}
#| eval: false
cp_ppp_jit <- rjitter(cp_ppp, 
                          retry=TRUE, 
                          nsim=1, 
                          drop=TRUE)
```

```{r}
#| eval: false
any(duplicated(cp_ppp_jit))
```

## 3.2 Transforming district_18 to sf and ppp format

```{r}
district_18_transform <- district_18 %>%
  st_transform(crs = 2326)
```

Converting sf format for district_18_transform into spatial class the sp format because you cannot do it directly here as well.

```{r}
district_18_sp <- as_Spatial(district_18_transform)
```

As mentioned earlier, spatstat requires the analytical data to be in ppp object form, but since there is no way to directly convert a Spatial\* classes into ppp object, we’ll need to convert the Spatial\* classes into a generic Spatial object first, then convert the generic sp object into ppp object form.

```{r}
district_18_sp<-as(district_18_sp, "SpatialPolygons")
```

I am confining the analysis with a geographical area. In spatstat, the object called owin is specially designed to represent this polygonal region. This produces the Hong Kong's districts boundary layers. We will be doing these same steps for Wan Chai, Sha Tin and Yau Tsim Mong districts later.

```{r}
#| eval: false
district_18_owin<-as(district_18_sp, "owin")
```

```{r}
#| eval: false
hk_cp_ppp <- cp_ppp_jit[district_18_owin]
```

hk_ppp.km contains all the recycling points in Hong Kong

```{r}
#| eval: false
hk_ppp.km <- rescale(hk_cp_ppp, 1000, "km")
```

# 4. KDE on Wan Chai

```{r}
wanchai <- district_18 %>%
  filter(ENAME == "WAN CHAI")
```

```{r}
wanchai <- wanchai %>%
  st_transform(crs = 2326)
```

```{r}
wanchai <- as_Spatial(wanchai)
```

```{r}
wanchai_sp <- as(wanchai, "SpatialPolygons")
```

```{r}
#| eval: false
wanchai_owin <- as(wanchai_sp, "owin")
```

```{r}
#| eval: false
hk_ppp_jit <- rjitter(hk_cp_ppp, 
                      retry=TRUE, 
                      nsim=1, 
                      drop=TRUE)
```

```{r}
#| eval: false
hk_wanchai_ppp <- hk_ppp_jit[wanchai_owin]
```

```{r}
#| eval: false
hk_wanchai_ppp.km = rescale(hk_wanchai_ppp, 1000, "km")
```

We will be doing KDE for different kernel smoothing methods, Gaussian, Epanechnikov, Quartic and Disc for Wan Chai, Sha Tin and Yau Tsim Mong respectively. Different smoothing methods are suitable for different types of data and applications.

```{r}
#| eval: false
wanchaigaussian <- density(hk_wanchai_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="gaussian")
```

```{r}
#| eval: false
saveRDS(wanchaigaussian, file = "data/rds/wanchaigaussian.rds")
```

```{r}
#| eval: false
wanchaigaussian <- read_rds("data/rds/wanchaigaussian.rds")
```

```{r}
#| eval: false
wanchaiepanechnikov <- density(hk_wanchai_ppp.km, 
                                    sigma=bw.ppl, 
                                    edge=TRUE, 
                                    kernel="epanechnikov")
```

```{r}
#| eval: false
saveRDS(wanchaiepanechnikov, file = "/Users/fangqilim/fangqi611/IS415-project/daylightapp/data/rds/wanchaiepanechnikov.rds")
```

```{r}
#| eval: false
wanchaiepanechnikov <- read_rds("data/rds/wanchaiepanechnikov.rds")
```

```{r}
#| eval: false
wanchaiquartic <- density(hk_wanchai_ppp.km, 
                               sigma=bw.ppl, 
                               edge=TRUE, 
                               kernel="quartic")
```

```{r}
#| eval: false
saveRDS(wanchaiquartic, file = "/Users/fangqilim/fangqi611/IS415-project/daylightapp/data/rds/wanchaiquartic.rds")
```

```{r}
#| eval: false
wanchaiquartic <- read_rds("data/rds/wanchaiquartic.rds")
```

```{r}
#| eval: false
wanchaidisc <- density(hk_wanchai_ppp.km, 
                          sigma=bw.ppl, 
                          edge=TRUE, 
                          kernel="disc")
```

```{r}
#| eval: false
saveRDS(wanchaidisc, file = "data/rds/wanchaidisc.rds")
```

```{r}
#| eval: false
wanchaidisc <- read_rds("data/rds/wanchaidisc.rds")
```

# 5. KDE on Sha Tin

```{r}
#| eval: false
shatin <- district_18 %>%
  filter(ENAME == "SHA TIN")
```

```{r}
#| eval: false
shatin <- shatin %>%
  st_transform(crs = 2326)
```

```{r}
#| eval: false
shatin <- as_Spatial(shatin)
```

```{r}
#| eval: false
shatin_sp <- as(shatin, "SpatialPolygons")
```

```{r}
#| eval: false
shatin_owin <- as(shatin_sp, "owin")
```

```{r}
#| eval: false
hk_ppp_jit <- rjitter(hk_cp_ppp, 
                      retry=TRUE, 
                      nsim=1, 
                      drop=TRUE)
```

```{r}
#| eval: false
hk_shatin_ppp = hk_ppp_jit[shatin_owin]
```

```{r}
#| eval: false
hk_shatin_ppp.km = rescale(hk_shatin_ppp, 1000, "km")
```

```{r}
#| eval: false
shatingaussian <- density(hk_shatin_ppp.km, 
                           sigma=bw.ppl, 
                           edge=TRUE, 
                           kernel="gaussian")
```

```{r}
#| eval: false
saveRDS(shatingaussian, file = "/Users/fangqilim/fangqi611/IS415-project/daylightapp/data/rds/shatingaussian.rds")
```

```{r}
#| eval: false
shatingaussian <- read_rds("data/rds/shatingaussian.rds")
```

```{r}
#| eval: false
shatinepanechnikov <- density(hk_shatin_ppp.km, 
                               sigma=bw.ppl, 
                               edge=TRUE, 
                               kernel="epanechnikov")
```

```{r}
#| eval: false
saveRDS(shatinepanechnikov, file = "data/rds/shatinepanechnikov.rds")
```

```{r}
#| eval: false
shatinepanechnikov <- read_rds("data/rds/shatinepanechnikov.rds")
```

```{r}
#| eval: false
shatinquartic <- density(hk_shatin_ppp.km, 
                          sigma=bw.ppl, 
                          edge=TRUE, 
                          kernel="quartic")
```

```{r}
#| eval: false
saveRDS(shatinquartic, file = "/Users/fangqilim/fangqi611/IS415-project/daylightapp/data/rds/shatinquartic.rds")
```

```{r}
#| eval: false
shatinquartic <- read_rds("data/rds/shatinquartic.rds")
```

```{r}
#| eval: false
shatindisc <- density(hk_shatin_ppp.km, 
                       sigma=bw.ppl, 
                       edge=TRUE, 
                       kernel="disc")
```

```{r}
#| eval: false
saveRDS(shatindisc, file = "/Users/fangqilim/fangqi611/IS415-project/daylightapp/data/rds/shatindisc.rds")
```

```{r}
#| eval: false
shatindisc <- read_rds("data/rds/shatindisc.rds")
```

# 6. KDE on Yau Tsim Mong

```{r}
#| eval: false
ytm <- district_18 %>%
  filter(ENAME == "YAU TSIM MONG")
```

```{r}
#| eval: false
ytm <- ytm %>%
  st_transform(crs = 2326)
```

```{r}
#| eval: false
ytm <- as_Spatial(ytm)
```

```{r}
#| eval: false
ytm_sp <- as(ytm, "SpatialPolygons")
```

```{r}
#| eval: false
ytm_owin <- as(ytm_sp, "owin")
```

```{r}
#| eval: false
hk_ppp_jit <- rjitter(hk_cp_ppp, 
                      retry=TRUE, 
                      nsim=1, 
                      drop=TRUE)
```

```{r}
#| eval: false
hk_ytm_ppp <- hk_ppp_jit[ytm_owin]
```

```{r}
#| eval: false
hk_ytm_ppp.km = rescale(hk_ytm_ppp, 1000, "km")
```

```{r}
#| eval: false
ytmgaussian <- density(hk_ytm_ppp.km, 
                          sigma=bw.ppl, 
                          edge=TRUE, 
                          kernel="gaussian")
```

```{r}
#| eval: false
saveRDS(ytmgaussian, file = "data/rds/ytmgaussian.rds")
```

```{r}
#| eval: false
ytmgaussian <- read_rds("data/rds/ytmgaussian.rds")
```

```{r}
#| eval: false
ytmepanechnikov <- density(hk_ytm_ppp.km, 
                              sigma=bw.ppl, 
                              edge=TRUE, 
                              kernel="epanechnikov")
```

```{r}
#| eval: false
saveRDS(ytmepanechnikov, file = "data/rds/ytmepanechnikov.rds")
```

```{r}
#| eval: false
ytmepanechnikov <- read_rds("data/rds/ytmepanechnikov.rds")
```

```{r}
#| eval: false
ytmquartic <- density(hk_ytm_ppp.km, 
                         sigma=bw.ppl, 
                         edge=TRUE, 
                         kernel="quartic")
```

```{r}
#| eval: false
saveRDS(ytmquartic, file = "data/rds/ytmquartic.rds")
```

```{r}
#| eval: false
ytmquartic <- read_rds("data/rds/ytmquartic.rds")
```

```{r}
#| eval: false
ytmdisc <- density(hk_ytm_ppp.km, 
                      sigma=bw.ppl, 
                      edge=TRUE, 
                      kernel="disc")
```

```{r}
#| eval: false
saveRDS(ytmdisc, file = "data/rds/ytmdisc.rds")
```

```{r}
#| eval: false
ytmdisc <- read_rds("data/rds/ytmdisc.rds")
```
